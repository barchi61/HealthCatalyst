<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- The Background Brush is used as the background for the Main Window -->
    <SolidColorBrush x:Key="MainBackgroundBrush" Color="#FF202020" />

    <LinearGradientBrush x:Key="MainGradientBrush" EndPoint="0.439,0.967" StartPoint="0.561,0.033">
        <GradientStop Color="#FF202020" Offset="0" />
        <GradientStop Color="#FF545454" Offset="1" />
    </LinearGradientBrush>

    <!-- MenuBorderBrush is used as the Border for MenuItems -->
    <SolidColorBrush x:Key="MenuBorderBrush" Color="Gray"/>

    <!-- MenuPressedBrush - This brush is used for the Main Menu pressed and focused state-->
    <SolidColorBrush x:Key="MenuPressedBrush" Color="Gray"/>

    <SolidColorBrush x:Key="PopupMenuBackgroundBrush" Color="#FF000000" />

    <SolidColorBrush x:Key="MenuIsHighlightedBrush" Color="Gray"/>

    <!-- Disabled Brushes are used for the Disabled look of each control -->
    <SolidColorBrush x:Key="DisabledMenuForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />
    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

    <!-- This BitmapEffect is used by the Simple MenuItem -->
    <DropShadowBitmapEffect x:Key="PopupDropShadow" ShadowDepth="1.5" Softness="0.15" />

    <!-- This is a color setting for text -->
    <SolidColorBrush x:Key="FontColor" Color="#FFE6E6E6" />
    <SolidColorBrush x:Key="HeaderFontColor" Color="#FFE6E6E6" />
    <SolidColorBrush x:Key="InputFontColor" Color="#FFE6E6E6" />
    <SolidColorBrush x:Key="GridHeaderFontColor" Color="#FF888888" />
    <SolidColorBrush x:Key="AlternateFontColor" Color="#FF888888" />
    <SolidColorBrush x:Key="SharedBirthdaysGroupHeaderColor" Color="#FFAAAAAA" />

    <!-- The Border Brush is used as the color for most borders -->
    <SolidColorBrush x:Key="BorderBrush" Color="#FF747474" />
    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

    <!-- The DataGrid Style -->
    <Style x:Key="RowStyleWithAlternation" TargetType="DataGridRow">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="GhostWhite"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="ContextMenu" Value="{x:Null}"/>
        <Style.Triggers>
            <Trigger Property="AlternationIndex" Value="1">
                <Setter Property="Background" Value="#FFD0D0E0"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True" >
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect Color="Red" ShadowDepth="0" BlurRadius="20" />
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderThickness" Value="2" />
                <Setter Property="BorderBrush" Value="Red" />
                <Setter Property="Foreground" Value="Blue" />
                <Setter Property="FontSize" Value="12" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <LinearGradientBrush x:Key="HeaderBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#FF6B8E95" Offset="0"/>
        <GradientStop Color="#FF14A7C1" Offset="1"/>
        <GradientStop Color="#FF1E424E" Offset="0.509"/>
        <GradientStop Color="#FF1D4855" Offset="0.542"/>
        <GradientStop Color="#FF1D4855" Offset="0.542"/>
        <GradientStop Color="#FF193A44" Offset="0.526"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HeaderBorderBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#FF1D1D1D" Offset="0.614"/>
        <GradientStop Color="#FF007F96" Offset="0.853"/>
        <GradientStop Color="#FF0AEAFA" Offset="1"/>
    </LinearGradientBrush>

    <Style x:Key="HeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="{StaticResource HeaderBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>

    <!-- Main Menu - This template uses a StackPanel to layout MenuItems -->
    <Style x:Key="MenuStyle" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{StaticResource MenuBorderBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Grid>
                        <Border Margin="1" x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                        <StackPanel Background="{TemplateBinding Background}" IsItemsHost="True" ClipToBounds="True" Orientation="Horizontal" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{StaticResource DisabledBackgroundBrush}" TargetName="Border" />
                            <Setter Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" TargetName="Border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- MenuItem - The template uses triggers to provide four different arrangements of menu item which are set via the Role property -->
    <Style x:Key="MenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource FontColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{x:Null}" BorderThickness="1,1,1,1" CornerRadius="3,3,3,3" Margin="0,0,10,0">
                        <Grid>

                            <!-- The Grid is used to hold together columns for an Content and Arrow to show the next level
							 Size sharing is used in Grid so that the Icon, Content, Arrow for each MenuItem align together -->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="14" />
                            </Grid.ColumnDefinitions>

                            <!-- Content for the menu text etc -->
                            <ContentPresenter Margin="{TemplateBinding Padding}" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header" />

                            <!-- Arrow drawn path which points to the next level of the menu -->
                            <Grid Grid.Column="1" Margin="0,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" Data="M-1.0089707E-11,0.0050000012 L8.03125,-3.5155176E-24 3.9995833,4.095 z" Height="4.095" />
                            </Grid>

                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" x:Name="SubMenuPopup" Focusable="false" AllowsTransparency="true" VerticalOffset="0" PopupAnimation="Slide">
                                <Grid x:Name="SubMenu">
                                    <Border x:Name="SubMenuBorder" Background="{StaticResource PopupMenuBackgroundBrush}" BorderBrush="{StaticResource SolidBorderBrush}" BorderThickness="1" />
                                    <!-- StackPanel holds children of the menu. This is set bu IsItemsHost=True -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </Grid>
                            </Popup>

                        </Grid>
                    </Border>

                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>

                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Margin" Value="0,1,0,1" />
                            <Setter Property="Padding" Value="6,3,6,3" />
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup" />
                        </Trigger>

                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Margin" Value="0,1,0,1" />
                            <Setter Property="Padding" Value="6,3,6,3" />
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel" />
                        </Trigger>

                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top" />
                            <Setter Property="Padding" Value="0,2,0,2" />
                            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                        </Trigger>

                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top" />
                            <Setter Property="Padding" Value="0,2,0,2" />
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel" />
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup" />
                        </Trigger>

                        <Trigger Property="AllowsTransparency" SourceName="SubMenuPopup" Value="true">
                            <Setter Property="Margin" Value="0,0,3,3" TargetName="SubMenu" />
                            <Setter Property="SnapsToDevicePixels" Value="true" TargetName="SubMenu" />
                            <Setter Property="BitmapEffect" Value="{StaticResource PopupDropShadow}" TargetName="SubMenuBorder" />
                        </Trigger>

                        <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="{StaticResource MenuIsHighlightedBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                            <Setter Property="BorderBrush" TargetName="Border" Value="#FF000000" />
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="{StaticResource MenuPressedBrush}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="{StaticResource MenuPressedBrush}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledMenuForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AlternatingItemStyle" TargetType="{x:Type UserControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                <Setter Property="Margin" Value="10,5"></Setter>
            </Trigger>
            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                <Setter Property="HorizontalAlignment" Value="Right"></Setter>
                <Setter Property="Margin" Value="20,-30"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- This is the style for most borders -->
    <Style x:Key="BorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}" />
        <Setter Property="CornerRadius" Value="10,10,10,10" />
    </Style>

    <!-- ButtonBorderBrush is used as the Border for buttons  -->
    <LinearGradientBrush x:Key="ButtonBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#CCC" Offset="0.0" />
        <GradientStop Color="#444" Offset="1.0" />
    </LinearGradientBrush>

    <!-- ExpanderHeaderBackgroundBrush is used as the Background for Expander header  -->
    <LinearGradientBrush x:Key="ExpanderHeaderBackgroundBrush" StartPoint="0.499999,0.00908135" EndPoint="0.499999,1.17275">
        <GradientStop Color="#D43B874A" Offset="0" />
        <GradientStop Color="#D43A87B4" Offset="0.0236486" />
        <GradientStop Color="#D409242A" Offset="1" />
    </LinearGradientBrush>

    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1" Margin="0" SnapsToDevicePixels="true"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Border BorderThickness="1,1,1,1" CornerRadius="10,10,2,2" Background="{x:Null}" >
                            <Border BorderBrush="{x:Null}" Height="Auto" CornerRadius="10,10,2,2" Width="Auto" Margin="1,1,1,1" Background="{StaticResource ExpanderHeaderBackgroundBrush}">
                                <Grid SnapsToDevicePixels="False" Background="Transparent" Margin="0,2,0,2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="45"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid Grid.Column="0">
                                        <Grid Width="26" Height="26">
                                            <Ellipse StrokeThickness="4" x:Name="ellipseHover" Margin="-4,-4,-4,-4" Fill="{x:Null}" Visibility="Hidden">
                                                <Ellipse.Stroke>
                                                    <RadialGradientBrush>
                                                        <GradientStop Color="#4CFFFFFF" Offset="0.808"/>
                                                        <GradientStop Color="#00F1FF00" Offset="1"/>
                                                    </RadialGradientBrush>
                                                </Ellipse.Stroke>
                                            </Ellipse>
                                            <Ellipse Stroke="{StaticResource ButtonBorderBrush}" StrokeThickness="2" x:Name="ellipse">
                                                <Ellipse.Fill>

                                                    <LinearGradientBrush StartPoint="0.499999,0.00908135" EndPoint="0.499999,1.17275">
                                                        <GradientStop Color="#D43B7D87" Offset="0" />
                                                        <GradientStop Color="#D43B877C" Offset="0.0236486" />
                                                        <GradientStop Color="#D409242A" Offset="1" />
                                                    </LinearGradientBrush>

                                                </Ellipse.Fill>
                                            </Ellipse>
                                            <Path Fill="#99FFFFFF" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="2" HorizontalAlignment="Center" Margin="0,0,0,5" VerticalAlignment="Center" Width="14" Height="8" Data="M49,49 L25,73 1,49 25,65 z" x:Name="path" RenderTransformOrigin="0.5,0.5">
                                                <Path.RenderTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                                        <SkewTransform AngleX="0" AngleY="0"/>
                                                        <RotateTransform Angle="0"/>
                                                        <TranslateTransform X="0" Y="0"/>
                                                    </TransformGroup>
                                                </Path.RenderTransform>
                                            </Path>
                                            <Path Fill="#B2FFFFFF" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="2" Margin="0,4,0,0" Data="M49,49 L25,73 1,49 25,65 z" HorizontalAlignment="Center" VerticalAlignment="Center" Width="16" Height="11" x:Name="path1" RenderTransformOrigin="0.5,0.5">
                                                <Path.RenderTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                                        <SkewTransform AngleX="0" AngleY="0"/>
                                                        <RotateTransform Angle="0"/>
                                                        <TranslateTransform X="0" Y="0"/>
                                                    </TransformGroup>
                                                </Path.RenderTransform>
                                            </Path>
                                        </Grid>
                                    </Grid>
                                    <ContentPresenter HorizontalAlignment="Left"  VerticalAlignment="Center"  Margin="4,0,0,0" Grid.Column="1"  RecognizesAccessKey="True"/>
                                </Grid>
                            </Border>
                        </Border>
                    </Border>
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="StoryboardDown">
                            <PointAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ellipse" Storyboard.TargetProperty="(Shape.Fill).(LinearGradientBrush.StartPoint)" Duration="00:00:00.0010000">
                                <SplinePointKeyFrame KeyTime="00:00:00" Value="0.5,1.173"/>
                            </PointAnimationUsingKeyFrames>
                            <PointAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ellipse" Storyboard.TargetProperty="(Shape.Fill).(LinearGradientBrush.EndPoint)" Duration="00:00:00.0010000">
                                <SplinePointKeyFrame KeyTime="00:00:00" Value="0.5,0.009"/>
                            </PointAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="path1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="StoryboardUp">
                            <PointAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ellipse" Storyboard.TargetProperty="(Shape.Fill).(LinearGradientBrush.StartPoint)" Duration="00:00:00.0010000">
                                <SplinePointKeyFrame KeyTime="00:00:00" Value="0.499999,0.00908135"/>
                            </PointAnimationUsingKeyFrames>
                            <PointAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ellipse" Storyboard.TargetProperty="(Shape.Fill).(LinearGradientBrush.EndPoint)" Duration="00:00:00.0010000">
                                <SplinePointKeyFrame KeyTime="00:00:00" Value="0.499999,1.17275"/>
                            </PointAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="path1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="StoryboardOver">
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ellipseHover" Storyboard.TargetProperty="(UIElement.Visibility)" Duration="00:00:00.0010000">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ellipseHover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" KeySpline="0,0,0,1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="StoryboardOut">
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ellipseHover" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                                <DiscreteObjectKeyFrame KeyTime="00:00:00.2000000" Value="{x:Static Visibility.Visible}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ellipseHover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="RenderTransform" TargetName="path" >
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="180"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransform" TargetName="path1" >
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="180"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardOut}" x:Name="StoryboardOut_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardOver}" x:Name="StoryboardOver_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardUp}" x:Name="StoryboardUp_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardDown}" x:Name="StoryboardDown_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border x:Name="border" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                        <DockPanel>
                            <ToggleButton FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" 
                                          Margin="1" MinHeight="0" MinWidth="0" x:Name="HeaderSite" Style="{StaticResource ExpanderDownHeaderStyle}" 
                                          Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                          FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" 
                                          Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" 
                                          DockPanel.Dock="Top" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ContentPresenter Height="140" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" 
                                              x:Name="ExpandSite" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                              Focusable="false" Visibility="Collapsed" DockPanel.Dock="Bottom"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="StoryboardExpanded">
                            <DoubleAnimation From="0" To="1" Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(UIElement.Opacity)" Duration="0:00:00.4"/>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:00:00" Value="{x:Static Visibility.Visible}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimation From="0" To="140" Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="Height" Duration="0:00:00.2"/>
                        </Storyboard>
                        <Storyboard x:Key="StoryboardCollapsed">
                            <DoubleAnimation From="1" To="0" Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(UIElement.Opacity)" Duration="0:00:00.1"/>
                            <DoubleAnimation From="140" To="0" Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="Height" Duration="0:00:00.2"/>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:00:00.2" Value="{x:Static Visibility.Hidden}"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="Expander.Expanded">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardExpanded}" x:Name="StoryboardExpanded_BeginStoryboard"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Expander.Collapsed">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardCollapsed}" x:Name="StoryboardCollapsed_BeginStoryboard"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardCollapsed}" x:Name="StoryboardCollapsed_BeginStoryboard1"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.4" />
                            <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Refresh Botton Style -->
    <Style x:Key="RefreshButtonStyle" TargetType="{x:Type Button}">
        <Style.BasedOn>
            <Style TargetType="{x:Type Button}">
                <Setter Property="Foreground" Value="#FFFFFFFF"/>
                <Setter Property="FontSize" Value="10"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid HorizontalAlignment="Stretch" x:Name="grid">
                                <Viewbox Margin="0,0,0,0" Stretch="Fill" VerticalAlignment="Stretch" Width="Auto" HorizontalAlignment="Stretch">
                                    <Grid Width="70" Height="70" x:Name="grid1">

                                        <Ellipse Stroke="{x:Null}" StrokeThickness="4" x:Name="OuterEllipse">
                                            <Ellipse.Fill>
                                                <RadialGradientBrush>
                                                    <GradientStop Color="#FF01621F" Offset="0.522"/>
                                                    <GradientStop Color="#BC3AAD5E" Offset="1"/>
                                                    <GradientStop Color="#D001621F" Offset="0.938"/>
                                                </RadialGradientBrush>
                                            </Ellipse.Fill>
                                        </Ellipse>

                                        <Ellipse Stroke="{x:Null}" StrokeThickness="4" Margin="3.6,3.95,4.2,3.85" x:Name="InnerEllipse">
                                            <Ellipse.Fill>
                                                <RadialGradientBrush>
                                                    <RadialGradientBrush.RelativeTransform>
                                                        <TransformGroup>
                                                            <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1" ScaleY="1"/>
                                                            <SkewTransform AngleX="0" AngleY="0" CenterX="0.5" CenterY="0.5"/>
                                                            <RotateTransform Angle="90.279" CenterX="0.5" CenterY="0.5"/>
                                                            <TranslateTransform X="-0.17" Y="-0.193"/>
                                                        </TransformGroup>
                                                    </RadialGradientBrush.RelativeTransform>
                                                    <GradientStop Color="#FFA2E4A2" Offset="0"/>
                                                    <GradientStop Color="#FF479547" Offset="1"/>
                                                </RadialGradientBrush>
                                            </Ellipse.Fill>
                                        </Ellipse>

                                        <Path Stretch="Fill" StrokeThickness="0" x:Name="ArrowsPath" RenderTransformOrigin="0.5,0.5" Data="M26.826754,40.019998 L23.438574,51.135802 C44.268988,55.623298 55.379534,41.947063 55.422999,41.893448 44.320937,69.592646 19.963885,63.388195 19.914866,63.375677 L16.391158,73.866997 0.67000072,50.886008 26.826754,40.019998 z M39.031843,0 L54.753001,22.980989 28.596245,33.847001 31.984427,22.731195 C11.127858,18.238066 0.015579104,31.954306 0,31.97355 11.102083,4.2743073 35.459196,10.478825 35.508135,10.491322 L39.031843,0 z" Margin="15,10,15,10" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Path.Stroke>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#FF3A9556" Offset="0.54"/>
                                                    <GradientStop Color="#AD0A5922" Offset="0"/>
                                                    <GradientStop Color="#B021763B" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Path.Stroke>
                                            <Path.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                                    <SkewTransform AngleX="0" AngleY="0"/>
                                                    <RotateTransform Angle="0"/>
                                                    <TranslateTransform X="0" Y="0"/>
                                                </TransformGroup>
                                            </Path.RenderTransform>
                                            <Path.Fill>
                                                <RadialGradientBrush>
                                                    <GradientStop Color="#FF3A8C3A" Offset="0"/>
                                                    <GradientStop Color="#FF095A22" Offset="1"/>
                                                    <GradientStop Color="#FF338044" Offset="0.763"/>
                                                </RadialGradientBrush>
                                            </Path.Fill>
                                        </Path>

                                    </Grid>
                                </Viewbox>
                            </Grid>
                            <ControlTemplate.Resources>

                                <Storyboard x:Key="Storyboard1">
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ArrowsPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" RepeatBehavior="1x">
                                        <SplineDoubleKeyFrame KeySpline="0.512,0,0.52,1" KeyTime="00:00:00.5000000" Value="360"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>

                            </ControlTemplate.Resources>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Trigger.ExitActions>
                                        <StopStoryboard BeginStoryboardName="Storyboard1_BeginStoryboard"/>
                                    </Trigger.ExitActions>
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource Storyboard1}" x:Name="Storyboard1_BeginStoryboard"/>
                                    </Trigger.EnterActions>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="InnerEllipse" Property="Fill">
                                        <Setter.Value>
                                            <RadialGradientBrush>
                                                <RadialGradientBrush.RelativeTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1" ScaleY="1"/>
                                                        <SkewTransform AngleX="0" AngleY="0" CenterX="0.5" CenterY="0.5"/>
                                                        <RotateTransform Angle="90.279" CenterX="0.5" CenterY="0.5"/>
                                                        <TranslateTransform X="0.043" Y="0.093"/>
                                                    </TransformGroup>
                                                </RadialGradientBrush.RelativeTransform>
                                                <GradientStop Color="#FFA2E4A2" Offset="0"/>
                                                <GradientStop Color="#FF479547" Offset="1"/>
                                            </RadialGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Margin" TargetName="ArrowsPath" Value="16,11,14,9"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.BasedOn>
    </Style>

</ResourceDictionary>